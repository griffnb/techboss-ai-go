name: Deploy Production

on:
  workflow_dispatch:
  push:
    branches:
      - 'main'

# Define environment mappings
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    environment: 
      name: production
    permissions:
      id-token: write
      contents: read
    outputs:
      api_image_tag: ${{ steps.build_api.outputs.api_image_tag }}
      taskmaster_image_tag: ${{ steps.build_taskmaster.outputs.taskmaster_image_tag }}
      taskworker_image_tag: ${{ steps.build_taskworker.outputs.taskworker_image_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
            go-version-file: go.mod

      - name: Authenticate to GitHub and Install Deps
        env:
          GOPRIVATE: github.com/CrowdShield/*
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.CI_DEPLOY_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          git config --global url."git@github.com:".insteadOf "https://github.com/"
          go mod download
      
      #---- API ----
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          role-to-assume: arn:aws:iam::${{ vars.ACCOUNT_ID }}:role/api-deploy-role
          unset-current-credentials: true
      - name: Build API
        id: build_api
        run: |
          FULL_OUTPUT=$(APP="api" COMMAND_PATH="cmd/server" bash -ex infra/build/build_image.sh)
          API_IMAGE_TAG=$(echo "$FULL_OUTPUT" | tail -n 1)
          echo "api_image_tag=$API_IMAGE_TAG" >> $GITHUB_OUTPUT

      #---- TASKMASTER ----
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          role-to-assume: arn:aws:iam::${{ vars.ACCOUNT_ID }}:role/task-master-deploy-role
          unset-current-credentials: true
      - name: Build Taskmaster
        id: build_taskmaster
        run: |
          FULL_OUTPUT=$(APP="task-master" COMMAND_PATH="cmd/taskmaster" bash -ex infra/build/build_image.sh)
          TASKMASTER_IMAGE_TAG=$(echo "$FULL_OUTPUT" | tail -n 1)
          echo "taskmaster_image_tag=$TASKMASTER_IMAGE_TAG" >> $GITHUB_OUTPUT

      #---- TASKWORKER ----
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          role-to-assume: arn:aws:iam::${{ vars.ACCOUNT_ID }}:role/task-worker-deploy-role
          unset-current-credentials: true
      - name: Build Taskworker
        id: build_taskworker
        run: |
          FULL_OUTPUT=$(APP="task-worker" COMMAND_PATH="cmd/taskworker" bash -ex infra/build/build_image.sh)
          TASKWORKER_IMAGE_TAG=$(echo "$FULL_OUTPUT" | tail -n 1)
          echo "taskworker_image_tag=$TASKWORKER_IMAGE_TAG" >> $GITHUB_OUTPUT


  # Split the jobs to ensure we have independent jobs for each service
  deploy_taskmaster:
    name: Deploy taskmaster
    needs: [build]
    env:
      APP: task-master
      ENVIRONMENT: production
      SYSTEM_MEMORY: "2048"
      SYSTEM_CPU: "1024"
      TASK_COUNT: 1
      IMAGE: "${{ needs.build.outputs.taskmaster_image_tag }}"
    runs-on: ubuntu-latest
    timeout-minutes: 10
    concurrency: ${{ github.event.inputs.environment }}-taskmaster
    permissions:
      id-token: write
      contents: read
    environment: 
      name: production
    steps:
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          role-to-assume: arn:aws:iam::${{ vars.ACCOUNT_ID }}:role/task-master-deploy-role
      - uses: actions/checkout@v4
      - run: |
              bash -ex infra/deploy/deploy_worker.sh

  deploy_taskworker:
    name: Deploy taskworker
    needs: [build, deploy_taskmaster]
    env:
      APP: task-worker
      ENVIRONMENT: production
      SYSTEM_MEMORY: "3072"
      SYSTEM_CPU: "1024"
      TASK_COUNT: 1
      IMAGE: "${{ needs.build.outputs.taskworker_image_tag }}"
    runs-on: ubuntu-latest
    timeout-minutes: 10
    concurrency: ${{ github.event.inputs.environment }}-taskworker
    permissions:
      id-token: write
      contents: read
    environment: 
      name: production
    steps:
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          role-to-assume: arn:aws:iam::${{ vars.ACCOUNT_ID }}:role/task-worker-deploy-role
      - uses: actions/checkout@v4
      - run: |
              bash -ex infra/deploy/deploy_worker.sh

  deploy_api:
    name: Deploy api
    needs: [build, deploy_taskmaster]
    env:
      APP: api
      ENVIRONMENT: production
      SYSTEM_MEMORY: "3072"
      SYSTEM_CPU: "1024"
      TASK_COUNT: 2
      IMAGE: "${{ needs.build.outputs.api_image_tag }}"
    runs-on: ubuntu-latest
    timeout-minutes: 10
    concurrency: ${{ github.event.inputs.environment }}-api
    permissions:
      id-token: write
      contents: read
    environment: 
      name: production
    steps:
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          role-to-assume: arn:aws:iam::${{ vars.ACCOUNT_ID }}:role/api-deploy-role
      - uses: actions/checkout@v4
      - run: |
              bash -ex infra/deploy/deploy_web.sh
