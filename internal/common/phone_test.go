package common

import (
	"testing"
)

func TestToE164(t *testing.T) {
	type args struct {
		phone string
	}
	tests := []struct {
		name string
		args args
		want string
	}{
		// GENERATED BY AI
		{
			name: "US number with no formatting",
			args: args{
				phone: "5551234567",
			},
			want: "+15551234567",
		}, {
			name: "US number with dashes",
			args: args{
				phone: "555-123-4567",
			},
			want: "+15551234567",
		}, {
			name: "US number with parentheses and space",
			args: args{
				phone: "(555) 123-4567",
			},
			want: "+15551234567",
		}, {
			name: "US number with country code",
			args: args{
				phone: "15551234567",
			},
			want: "+15551234567",
		}, {
			name: "US number with + country code",
			args: args{
				phone: "+15551234567",
			},
			want: "+15551234567",
		}, {
			name: "US number with space separated digits",
			args: args{
				phone: "555 123 4567",
			},
			want: "+15551234567",
		}, {
			name: "Already in E164 format",
			args: args{
				phone: "+15551234567",
			},
			want: "+15551234567",
		}, {
			name: "Non-US number",
			args: args{
				phone: "+445551234567",
			},
			want: "+445551234567",
		}, {
			name: "Number with letters",
			args: args{
				phone: "555-ABC-4567",
			},
			want: "5554567",
		}, {
			name: "Empty string",
			args: args{
				phone: "",
			},
			want: "",
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := ToE164(tt.args.phone); got != tt.want {
				t.Errorf("ToE164() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestFormatPhoneNumber(t *testing.T) {
	type args struct {
		phone   string
		pattern string
	}
	tests := []struct {
		name    string
		args    args
		want    string
		wantErr bool
	}{
		{
			name: "Standard US format (xxx) xxx-xxxx",
			args: args{
				phone:   "5551234567",
				pattern: "(xxx) xxx-xxxx",
			},
			want:    "(555) 123-4567",
			wantErr: false,
		},
		{
			name: "Dash format xxx-xxx-xxxx",
			args: args{
				phone:   "5551234567",
				pattern: "xxx-xxx-xxxx",
			},
			want:    "555-123-4567",
			wantErr: false,
		},
		{
			name: "Dot format xxx.xxx.xxxx",
			args: args{
				phone:   "5551234567",
				pattern: "xxx.xxx.xxxx",
			},
			want:    "555.123.4567",
			wantErr: false,
		},
		{
			name: "Space format xxx xxx xxxx",
			args: args{
				phone:   "5551234567",
				pattern: "xxx xxx xxxx",
			},
			want:    "555 123 4567",
			wantErr: false,
		},
		{
			name: "With country code +x (xxx) xxx-xxxx",
			args: args{
				phone:   "15551234567",
				pattern: "+x (xxx) xxx-xxxx",
			},
			want:    "+1 (555) 123-4567",
			wantErr: false,
		},
		{
			name: "Phone with existing formatting",
			args: args{
				phone:   "(555) 123-4567",
				pattern: "xxx-xxx-xxxx",
			},
			want:    "555-123-4567",
			wantErr: false,
		},
		{
			name: "Phone with letters",
			args: args{
				phone:   "555-ABC-4567",
				pattern: "(xxx) xxx-xxxx",
			},
			wantErr: true,
		},
		{
			name: "Extra digits - uses last required digits",
			args: args{
				phone:   "115551234567",
				pattern: "(xxx) xxx-xxxx",
			},
			want:    "(555) 123-4567",
			wantErr: false,
		},
		{
			name: "Short pattern xxx-xxxx",
			args: args{
				phone:   "1234567",
				pattern: "xxx-xxxx",
			},
			want:    "123-4567",
			wantErr: false,
		},
		{
			name: "Very short pattern xxx",
			args: args{
				phone:   "123",
				pattern: "xxx",
			},
			want:    "123",
			wantErr: false,
		},
		{
			name: "Insufficient digits",
			args: args{
				phone:   "12345",
				pattern: "(xxx) xxx-xxxx",
			},
			want:    "",
			wantErr: true,
		},
		{
			name: "Empty phone number",
			args: args{
				phone:   "",
				pattern: "xxx-xxx-xxxx",
			},
			want:    "",
			wantErr: true,
		},
		{
			name: "Phone with no digits",
			args: args{
				phone:   "ABC-DEF-GHIJ",
				pattern: "xxx-xxx-xxxx",
			},
			want:    "",
			wantErr: true,
		},
		{
			name: "Pattern with no x placeholders",
			args: args{
				phone:   "5551234567",
				pattern: "phone: ",
			},
			want:    "phone: ",
			wantErr: false,
		},
		{
			name: "Mixed characters in phone",
			args: args{
				phone:   "+1 (555) 123-4567 ext 890",
				pattern: "xxx-xxx-xxxx",
			},
			want:    "123-456-7890",
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := FormatPhoneNumber(tt.args.phone, tt.args.pattern)
			if (err != nil) != tt.wantErr {
				t.Errorf("FormatPhoneNumber() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if got != tt.want {
				t.Errorf("FormatPhoneNumber() = %v, want %v", got, tt.want)
			}
		})
	}
}
