// Code generated by core_generate; DO NOT EDIT.

package ai_tools

import (
	"net/http"

	"github.com/CrowdShield/go-core/lib/log"
	"github.com/CrowdShield/go-core/lib/router"
	"github.com/CrowdShield/go-core/lib/tools"
	"github.com/CrowdShield/go-core/lib/types"
	"github.com/go-chi/chi/v5"
	"github.com/griffnb/techboss-ai-go/internal/constants"
	"github.com/griffnb/techboss-ai-go/internal/controllers/helpers"
	"github.com/griffnb/techboss-ai-go/internal/models/ai_tool"
)

func authIndex(_ http.ResponseWriter, req *http.Request) ([]*ai_tool.AiToolJoined, int, error) {
	userSession := helpers.GetReqSession(req)

	user := userSession.User

	parameters := router.BuildIndexParams(req.Context(), req.URL.Query(), TABLE_NAME)

	if tools.Empty(parameters.Limit) {
		parameters.Limit = constants.SYSTEM_LIMIT
	}

	if !tools.Empty(req.URL.Query().Get("q")) {
		addSearch(parameters, req.URL.Query().Get("q"))
	}

	aiToolObjs, err := ai_tool.FindAllRestrictedJoined(req.Context(), parameters, user)
	if err != nil {
		log.ErrorContext(err, req.Context())
		return helpers.PublicBadRequestError[[]*ai_tool.AiToolJoined]()

	}

	return helpers.Success(aiToolObjs)
}

func authGet(_ http.ResponseWriter, req *http.Request) (*ai_tool.AiToolJoined, int, error) {
	userSession := helpers.GetReqSession(req)

	user := userSession.User

	id := chi.URLParam(req, "id")
	aiToolObj, err := ai_tool.GetRestrictedJoined(req.Context(), types.UUID(id), user)
	if err != nil {
		log.ErrorContext(err, req.Context())
		return helpers.PublicBadRequestError[*ai_tool.AiToolJoined]()

	}

	return helpers.Success(aiToolObj)
}

func authCreate(_ http.ResponseWriter, req *http.Request) (*ai_tool.AiTool, int, error) {
	if helpers.IsSuperUpdate(req) {
		return helpers.PublicCustomError[*ai_tool.AiTool]("not allowed to update as super user", http.StatusBadRequest)
	}

	userSession := helpers.GetReqSession(req)

	user := userSession.User

	rawdata := router.GetJSONPostData(req)
	data := helpers.ConvertPost(rawdata)
	aiToolObj := ai_tool.NewPublic(data, user)
	err := aiToolObj.Save(userSession.User)
	if err != nil {
		log.ErrorContext(err, req.Context())
		return helpers.PublicBadRequestError[*ai_tool.AiTool]()

	}

	return helpers.Success(aiToolObj)
}

func authUpdate(_ http.ResponseWriter, req *http.Request) (*ai_tool.AiToolJoined, int, error) {
	if helpers.IsSuperUpdate(req) {
		return helpers.PublicCustomError[*ai_tool.AiToolJoined]("not allowed to update as super user", http.StatusBadRequest)
	}

	userSession := helpers.GetReqSession(req)

	user := userSession.User

	id := chi.URLParam(req, "id")
	rawdata := router.GetJSONPostData(req)
	data := helpers.ConvertPost(rawdata)
	aiToolObj, err := ai_tool.GetRestrictedJoined(req.Context(), types.UUID(id), user)
	if err != nil {
		log.ErrorContext(err, req.Context())
		return helpers.PublicBadRequestError[*ai_tool.AiToolJoined]()
	}

	ai_tool.UpdatePublic(&aiToolObj.AiTool, data, user)
	err = aiToolObj.Save(userSession.User)
	if err != nil {
		log.ErrorContext(err, req.Context())
		return helpers.PublicBadRequestError[*ai_tool.AiToolJoined]()
	}

	return helpers.Success(aiToolObj)
}
