// Code generated by core_generate; DO NOT EDIT.

package organizations

import (
	"net/http"

	"github.com/CrowdShield/go-core/lib/log"
	"github.com/CrowdShield/go-core/lib/router"
	"github.com/CrowdShield/go-core/lib/tools"
	"github.com/CrowdShield/go-core/lib/types"
	"github.com/go-chi/chi/v5"
	"github.com/griffnb/techboss-ai-go/internal/constants"
	"github.com/griffnb/techboss-ai-go/internal/controllers/helpers"
	"github.com/griffnb/techboss-ai-go/internal/models/organization"
	"github.com/pkg/errors"
)

func adminIndex(_ http.ResponseWriter, req *http.Request) ([]*organization.OrganizationJoined, int, error) {

	parameters := router.BuildIndexParams(req.Context(), req.URL.Query(), TABLE_NAME)

	if tools.Empty(parameters.Limit) {
		parameters.Limit = constants.SYSTEM_LIMIT
	}

	if !tools.Empty(req.URL.Query().Get("q")) {
		addSearch(parameters, req.URL.Query().Get("q"))
	}

	organizationObjs, err := organization.FindAllJoined(req.Context(), parameters)
	if err != nil {
		log.ErrorContext(err, req.Context())
		return helpers.AdminBadRequestError[[]*organization.OrganizationJoined](err)

	}

	return helpers.Success(organizationObjs)

}

func adminGet(_ http.ResponseWriter, req *http.Request) (*organization.OrganizationJoined, int, error) {
	id := chi.URLParam(req, "id")

	organizationObj, err := organization.GetJoined(req.Context(), types.UUID(id))
	if err != nil {
		log.ErrorContext(err, req.Context())
		return helpers.AdminBadRequestError[*organization.OrganizationJoined](err)
	}

	return helpers.Success(organizationObj)
}

func adminCreate(_ http.ResponseWriter, req *http.Request) (*organization.Organization, int, error) {
	userSession := helpers.GetReqSession(req)
	rawdata := router.GetJSONPostData(req)
	data := helpers.ConvertPost(rawdata)
	organizationObj := organization.New()
	organizationObj.MergeData(data)
	err := organizationObj.Save(userSession.User)
	if err != nil {
		log.ErrorContext(err, req.Context())
		return helpers.AdminBadRequestError[*organization.Organization](err)

	}

	return helpers.Success(organizationObj)
}

func adminUpdate(_ http.ResponseWriter, req *http.Request) (*organization.OrganizationJoined, int, error) {
	userSession := helpers.GetReqSession(req)
	rawdata := router.GetJSONPostData(req)
	data := helpers.ConvertPost(rawdata)
	id := chi.URLParam(req, "id")
	organizationObj, err := organization.GetJoined(req.Context(), types.UUID(id))
	if err != nil {
		log.ErrorContext(err, req.Context())
		return helpers.AdminBadRequestError[*organization.OrganizationJoined](err)
	}

	if tools.Empty(organizationObj) {
		return helpers.AdminBadRequestError[*organization.OrganizationJoined](errors.Errorf("Object not found with ID: %s", id))
	}

	organizationObj.MergeData(data)
	err = organizationObj.Save(userSession.User)
	if err != nil {
		log.ErrorContext(err, req.Context())
		return helpers.AdminBadRequestError[*organization.OrganizationJoined](err)
	}

	return helpers.Success(organizationObj)
}

func adminCount(_ http.ResponseWriter, req *http.Request) (int64, int, error) {
	parameters := router.BuildIndexParams(req.Context(), req.URL.Query(), TABLE_NAME)
	organization.AddJoinData(parameters)
	count, err := organization.FindResultsCount(req.Context(), parameters)
	if err != nil {
		log.ErrorContext(err, req.Context())
		return helpers.AdminBadRequestError[int64](err)
	}

	return helpers.Success(count)
}
