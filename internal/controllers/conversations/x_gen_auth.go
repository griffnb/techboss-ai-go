// Code generated by core_generate; DO NOT EDIT.

package conversations

import (
	"net/http"

	"github.com/CrowdShield/go-core/lib/log"
	"github.com/CrowdShield/go-core/lib/router"
	"github.com/CrowdShield/go-core/lib/tools"
	"github.com/CrowdShield/go-core/lib/types"
	"github.com/go-chi/chi/v5"
	"github.com/griffnb/techboss-ai-go/internal/constants"
	"github.com/griffnb/techboss-ai-go/internal/controllers/helpers"
	"github.com/griffnb/techboss-ai-go/internal/models/conversation"
)

func authIndex(_ http.ResponseWriter, req *http.Request) ([]*conversation.ConversationJoined, int, error) {
	userSession := helpers.GetReqSession(req)

	user := userSession.User

	parameters := router.BuildIndexParams(req.Context(), req.URL.Query(), TABLE_NAME)

	if tools.Empty(parameters.Limit) {
		parameters.Limit = constants.SYSTEM_LIMIT
	}

	if !tools.Empty(req.URL.Query().Get("q")) {
		addSearch(parameters, req.URL.Query().Get("q"))
	}

	conversationObjs, err := conversation.FindAllRestrictedJoined(req.Context(), parameters, user)
	if err != nil {
		log.ErrorContext(err, req.Context())
		return helpers.PublicBadRequestError[[]*conversation.ConversationJoined]()

	}

	return helpers.Success(conversationObjs)
}

func authGet(_ http.ResponseWriter, req *http.Request) (*conversation.ConversationJoined, int, error) {
	userSession := helpers.GetReqSession(req)

	user := userSession.User

	id := chi.URLParam(req, "id")
	conversationObj, err := conversation.GetRestrictedJoined(req.Context(), types.UUID(id), user)
	if err != nil {
		log.ErrorContext(err, req.Context())
		return helpers.PublicBadRequestError[*conversation.ConversationJoined]()

	}

	return helpers.Success(conversationObj)
}

func authCreate(_ http.ResponseWriter, req *http.Request) (*conversation.Conversation, int, error) {
	if helpers.IsSuperUpdate(req) {
		return helpers.PublicCustomError[*conversation.Conversation]("not allowed to update as super user", http.StatusBadRequest)
	}

	userSession := helpers.GetReqSession(req)

	user := userSession.User

	rawdata := router.GetJSONPostData(req)
	data := helpers.ConvertPost(rawdata)
	conversationObj := conversation.NewPublic(data, user)
	err := conversationObj.Save(userSession.User)
	if err != nil {
		log.ErrorContext(err, req.Context())
		return helpers.PublicBadRequestError[*conversation.Conversation]()

	}

	return helpers.Success(conversationObj)
}

func authUpdate(_ http.ResponseWriter, req *http.Request) (*conversation.ConversationJoined, int, error) {
	if helpers.IsSuperUpdate(req) {
		return helpers.PublicCustomError[*conversation.ConversationJoined]("not allowed to update as super user", http.StatusBadRequest)
	}

	userSession := helpers.GetReqSession(req)

	user := userSession.User

	id := chi.URLParam(req, "id")
	rawdata := router.GetJSONPostData(req)
	data := helpers.ConvertPost(rawdata)
	conversationObj, err := conversation.GetRestrictedJoined(req.Context(), types.UUID(id), user)
	if err != nil {
		log.ErrorContext(err, req.Context())
		return helpers.PublicBadRequestError[*conversation.ConversationJoined]()
	}

	conversation.UpdatePublic(&conversationObj.Conversation, data, user)
	err = conversationObj.Save(userSession.User)
	if err != nil {
		log.ErrorContext(err, req.Context())
		return helpers.PublicBadRequestError[*conversation.ConversationJoined]()
	}

	return helpers.Success(conversationObj)
}
