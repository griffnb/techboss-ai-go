// Code generated by core_generate; DO NOT EDIT.

package ai_tool

import (
	"context"

	"github.com/CrowdShield/go-core/lib/model"
	"github.com/CrowdShield/go-core/lib/model/coremodel"
	"github.com/CrowdShield/go-core/lib/tools/slice"
	"github.com/CrowdShield/go-core/lib/types"
	"github.com/griffnb/techboss-ai-go/internal/models/base/caller"
	"github.com/griffnb/techboss-ai-go/internal/models/base/relationship"
)

type Caller struct{}

var _ caller.Caller = (*Caller)(nil)

func init() {
	caller.Registry().Register("ai_tool", &Caller{})
	relationship.Registry().Register("ai_tool", &Structure{})

}

func (this *Caller) New() any {
	return New()
}

func (this *Caller) NewSlice() any {
	return []*AiTool{}
}

func (this *Caller) NewSlicePtr() any {
	slice := []*AiTool{}
	return &slice
}

func (this *Caller) Get(ctx context.Context, id types.UUID) (coremodel.Model, error) {
	return Get(ctx, id)
}

func (this *Caller) GetJoined(ctx context.Context, id types.UUID) (coremodel.Model, error) {
	return GetJoined(ctx, id)
}

func (this *Caller) FindFirst(ctx context.Context, options *model.Options) (coremodel.Model, error) {
	return FindFirst(ctx, options)
}

func (this *Caller) FindFirstJoined(ctx context.Context, options *model.Options) (coremodel.Model, error) {
	return FindFirstJoined(ctx, options)
}

func (this *Caller) FindAll(ctx context.Context, options *model.Options) ([]coremodel.Model, error) {
	results, err := FindAll(ctx, options)
	if err != nil {
		return nil, err
	}

	return slice.Convert[coremodel.Model](results), nil
}

func (this *Caller) FindAllJoined(ctx context.Context, options *model.Options) ([]coremodel.Model, error) {
	results, err := FindAllJoined(ctx, options)

	if err != nil {
		return nil, err
	}

	return slice.Convert[coremodel.Model](results), nil
}
