// Code generated by core_generate; DO NOT EDIT.

package organization

import (
	"database/sql/driver"
	"encoding/json"

	"github.com/CrowdShield/go-core/lib/model"
	"github.com/CrowdShield/go-core/lib/model/fields"
	aws_types "github.com/aws/aws-sdk-go-v2/service/dynamodb/types"
	"github.com/pkg/errors"
)

// UnmarshalJSON interface
func (this *Organization) UnmarshalJSON(data []byte) error {
	this.InitializeWithChangeLogs(&model.InitializeOptions{
		Table:       TABLE,
		Model:       MODEL,
		ChangeLogs:  CHANGE_LOGS,
		Package:     PACKAGE,
		IsVersioned: IS_VERSIONED,
	})
	err := fields.InitializeFields(this)
	if err != nil {
		return err
	}

	return this.BaseModel.UnmarshalJSON(data)
}

// UnmarshalDynamoDBAttributeValue interface
func (this *Organization) UnmarshalDynamoDBAttributeValue(av aws_types.AttributeValue) error {
	this.InitializeWithChangeLogs(&model.InitializeOptions{
		Table:       TABLE,
		Model:       MODEL,
		ChangeLogs:  CHANGE_LOGS,
		Package:     PACKAGE,
		IsVersioned: IS_VERSIONED,
	})
	err := fields.InitializeFields(this)
	if err != nil {
		return err
	}

	return this.BaseModel.UnmarshalDynamoDBAttributeValue(av)
}

func (r *Organization) Scan(src any) error {
	switch v := src.(type) {
	case nil:
		*r = Organization{}
		return nil
	case []byte:
		return errors.WithStack(json.Unmarshal(v, r))
	case string:
		return errors.WithStack(json.Unmarshal([]byte(v), r))
	default:
		return errors.Errorf("Organization.Scan: unsupported type %T", src)
	}
}

func (r *Organization) Value() (driver.Value, error) {
	b, err := json.Marshal(r)
	if err != nil {
		return nil, errors.WithStack(err)
	}
	return string(b), nil // or b
}
