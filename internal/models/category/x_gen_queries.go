// Code generated by core_generate; DO NOT EDIT.

package category

import (
	"context"

	"github.com/CrowdShield/go-core/lib/log"
	"github.com/CrowdShield/go-core/lib/model"
	"github.com/CrowdShield/go-core/lib/types"
	"github.com/griffnb/techboss-ai-go/internal/environment"
)

func FindAll(ctx context.Context, options *model.Options) ([]*Category, error) {
	return all[*Category](ctx, options)
}

func FindFirst(ctx context.Context, options *model.Options) (*Category, error) {
	return first[*Category](ctx, options)
}

func Get(ctx context.Context, id types.UUID) (*Category, error) {
	return get[*Category](ctx, id)
}

func FindResultsCount(ctx context.Context, options *model.Options) (int64, error) {
	return environment.GetDBClient(CLIENT).FindResultsCount(ctx, TABLE, options)
}

// GetJoined gets a record with a specific ID and joins the hierarchy to it
func GetJoined(ctx context.Context, id types.UUID) (*CategoryJoined, error) {
	options := model.NewOptions().
		WithCondition("%s = :id:", Columns.ID_.Column()).
		WithParam(":id:", id)

	AddJoinData(options)
	return first[*CategoryJoined](ctx, options)
}

// FindFirstJoined Finds first record
func FindFirstJoined(ctx context.Context, options *model.Options) (*CategoryJoined, error) {
	AddJoinData(options)
	return first[*CategoryJoined](ctx, options)
}

// FindAllJoined Finds all records
func FindAllJoined(ctx context.Context, options *model.Options) ([]*CategoryJoined, error) {
	AddJoinData(options)
	return all[*CategoryJoined](ctx, options)
}

func all[T initializable](ctx context.Context, options *model.Options) ([]T, error) {
	results, err := environment.GetDBClient(CLIENT).FindAll(ctx, TABLE, options)
	if err != nil {
		return nil, err
	}

	modelResults := make([]T, len(results))
	for i, result := range results {
		obj := load[T](result)
		modelResults[i] = obj
	}
	return modelResults, nil
}

func first[T initializable](ctx context.Context, options *model.Options) (T, error) {
	result, err := environment.GetDBClient(CLIENT).FindFirst(ctx, TABLE, options)
	if err != nil {
		return *new(T), err
	}

	return load[T](result), nil
}

func get[T initializable](ctx context.Context, id types.UUID) (T, error) {
	result, err := environment.GetDBClient(CLIENT).Find(ctx, TABLE, id)
	if err != nil {
		log.Error(err)
		return *new(T), err
	}

	return load[T](result), nil
}
