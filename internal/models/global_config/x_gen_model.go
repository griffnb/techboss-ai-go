// Code generated by core_generate; DO NOT EDIT.

package global_config

import (
	"context"
	"sync"

	"github.com/CrowdShield/go-core/lib/log"
	"github.com/CrowdShield/go-core/lib/model"
	"github.com/CrowdShield/go-core/lib/model/coremodel"
	"github.com/CrowdShield/go-core/lib/model/fields"
	"github.com/CrowdShield/go-core/lib/tools"
)

var registerOnce sync.Once
var Columns *GlobalConfig

const (
	PACKAGE string = "global_config"
	MODEL   string = "GlobalConfig"
)

func init() {
	RegisterFields()
	Columns = New()
}

func RegisterFields() {
	registerOnce.Do(func() {
		fields.RegisterFieldTypes(&Structure{})
	})
}

func New() *GlobalConfig {
	return NewType[*GlobalConfig]()
}

func NewType[T initializable]() T {
	obj := tools.NewObj[T]()
	obj.InitializeWithChangeLogs(&model.InitializeOptions{
		Table:       TABLE,
		Model:       MODEL,
		ChangeLogs:  CHANGE_LOGS,
		Package:     PACKAGE,
		IsVersioned: IS_VERSIONED,
	})
	err := fields.InitializeFields(obj)
	if err != nil {
		log.Error(err)
	}
	return obj
}

type initializable interface {
	InitializeWithChangeLogs(*model.InitializeOptions)
	Load(result map[string]any)
}

func load[T initializable](result map[string]any) T {
	obj := NewType[T]()
	obj.Load(result)
	return obj
}

func (this *GlobalConfig) Save(savingUser coremodel.Model) error {
	return this.SaveWithContext(context.Background(), savingUser)
}

func (this *GlobalConfig) SaveWithContext(ctx context.Context, savingUser coremodel.Model) error {
	err := this.beforeSave(ctx)
	if err != nil {
		return err
	}
	_, err = this.BaseSave(ctx, savingUser)
	if err != nil {
		return err
	}
	this.afterSave(ctx)
	return nil
}
